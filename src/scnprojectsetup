#!/usr/bin/env python

import sys
import os
import argparse
import json
import shutil

from socket import gethostname
from pwd import getpwuid
from datetime import datetime
from subprocess import check_output

class ProjectSetup():

    def __init__(self):

        self.version = '1.6.0'

        # get the config file
        here = str(os.path.dirname(os.path.realpath(__file__)))
        json_config = os.path.join(here,'config.json')

        # initialise None variables that are defined inside functions
        self.project_types = None
        self.project_type_descriptions = None

        # initialise the config file and get user arguments
        self.config = self._initConfig(json_config)
        self.args = self._parser(json_config)

        # process the arguments
        self.destination = self._processArgs(self.args, self.project_types)
        self.paths = self._getProjectPaths(self.args.type, self.destination)

        # create the project as specified
        self._createProject(self.paths)

        # create log files.
        project_file = self._touchProjectFile(self.destination)
        self._pipeProjectInfo(project_file)
        self._duplicateProjectFile(project_file)

        # return info that the project was succesfully created
        print "{0} was succesfully created at {1}".format(self.args.name, self.args.destination)


    def _initConfig(self,json_config):
        # load the json file into memory as a dictionary
        json_data = open(json_config)
        config = json.load(json_data)
        json_data.close()

        # get all the project types and descriptions
        project_types = sorted(config['project_types'].keys())
        project_type_descriptions = []
        for i in project_types:
            description = config['project_types'][i]['description']
            project_type_descriptions.append('({0})'.format(description))

        self.project_types = project_types
        self.project_type_descriptions = project_type_descriptions

        return config


    def _dirtyString(self, string):
        # only allow lowercase and underscore
        clean_string_verification = 'abcdefghijklmnopqrstuvwxyz_0123456789'
        clean_string = ''.join([x for x in string if x in clean_string_verification])
        # check for uppercase letters or only numbers
        if string.isdigit():
            return 1 # cannot be only numbers
        elif string.isupper() or not (string.isupper() or string.islower()):
            return 2 # must be only lowercase
        elif len(clean_string) != len(string):
            return 3 # cannot contain symbols not included in clean_string_verification
        else:
            return False


    def _buildTypeString(self):
        type_string = ''
        for x in zip(self.project_types, self.project_type_descriptions):
            type_string += '\t'.join(x) + '\n'

        return type_string


    def _parser(self, json_config):
        parser = argparse.ArgumentParser(
            prog = 'scnprojectsetup',
            formatter_class = argparse.RawTextHelpFormatter,
            description = 'A sript that creates project folders based on a config file.',
            usage = '%(prog)s name type destination\n' +\
            'example: %(prog)s lhs03e01 ftr /Volumes/scn_ftr_04')
        parser.add_argument("name",help="Project name")
        parser.add_argument("type",help=(self._buildTypeString()))
        parser.add_argument("destination",help="Specify a destination folder"+\
                            '\n[ Tip! You can drag`n`drop ]',
                            metavar='destination')
        parser.add_argument("-v","--verbose",help='Increase output verbosity',
                            action="store_true")
        parser.add_argument("-c","--config",help='Specify a custom config file',
                            default=json_config,
                            metavar='FILE')
        if len(sys.argv) == 4:
            args = parser.parse_args()
        elif '-h' in sys.argv or '--help' in sys.argv:
            print '\nVersion: ' + self.version
            args = parser.parse_args()
        else:
            print '\nscnprojectsetup: ERROR: too few arguments\n'
            print '\nVersion: ' + self.version
            parser.print_help()
            sys.exit(0)

        return args


    def _processArgs(self, args, project_types):
        project_type = args.type
        project_name = args.name
        verbose = args.verbose
        destination_root = args.destination

        # -------------------- #
        # process project_type
        # -------------------- #
        if project_type in project_types:
            project_type = project_type
        else:
            try:
                project_type = int(project_type)
                project_type = project_types[project_type]
            except:
                print args.type + ' is not a recognised project type' +\
                    '\nRecognized types: %s' % ' '.join(self.project_types)
                sys.exit(0)
        if verbose:
            print 'PROJECT TYPE: %s' % project_type

        # -------------------- #
        # process project_name
        # -------------------- #
        if self._dirtyString(project_name):
            if self._dirtyString(project_name) == 1:
                print("Project name cannot consist of purely numbers." \
                      "\nThis is not according to specification. Project creating cancelled")
                sys.exit(0)
            elif self._dirtyString(project_name) == 2:
                print("Project name contains UPPERCASE letters."\
                      "\nThis is not according to specification. Project creation cancelled.")
                sys.exit(0)
            elif self._dirtyString(project_name) == 3:
                print("Project name contains non-ascii characters." \
                      "\nThis is not according to specification. Project creation cancelled.")
                sys.exit(0)
            else:
                print("Unexcpected error! Contact the it department!")
                sys.exit(0)

        if verbose:
            print 'CONFIG FILE: %s' % args.config

        # -------------------- #
        # process destination
        # -------------------- #
        if not os.path.isdir(destination_root):
            print "{0} does not exists. Project not created".format(destination_root)
            sys.exit(0)
        destination = os.path.join(destination_root,project_name)
        if verbose:
            print 'DESTINATION DIR: %s' % destination

        return destination


    def _getProjectPaths(self, path_type, path_root):

        # parse the config file
        paths = self.config['default']['folders']
        paths.extend(self.config['project_types'][path_type]['folders'])
        # omit folders as specified in config
        omit = self.config['project_types'][path_type]['omit']
        for item in omit:
            while paths.count(item) > 0:
                paths.remove(item)

        # build type type subfolders
        subfolder = self.config['project_types'][path_type]['subfolder']

        project_paths = []
        for path in paths:
            if subfolder:
                project_paths.append(os.path.join(path_root, path_type, path))
            else:
                project_paths.append(os.path.join(path_root, path))

        # return all paths to be created as a list of strings
        return project_paths


    def _createProject(self, paths):
        for path in paths:
            try:
                os.makedirs(path)
            except OSError as e:
                existing_folder = os.path.join(self.destination,self.args.type)
                print("%s already exists.\nNo project folders created" % existing_folder)
                sys.exit(0)


    def _touchProjectFile(self, destination):
        project_file = os.path.join(destination, ('_' + self.args.name + '.txt'))
        if not os.path.isfile(project_file):
            open(project_file, 'a').close()

        return project_file


    def _pipeProjectInfo(self, project_file):
        info_string = \
            'Name of project: %s' % self.args.name +\
            '\nProject path: %s' % self.destination +\
            '\nProject type: %s' % self.args.type +\
            '\nCreated with: scnprojectsetup %s' % self.version +\
            '\nCreator: %s@%s' %  (getpwuid(os.getuid()).pw_name, gethostname()) +\
            '\nCreation date: %s' % str(datetime.now())[:-7] +\
            '\n' +\
            '\nUptime at creation: %s' % str(check_output("uptime")) +\
            '\nMounted volumes at creation time:\n%s' % str(check_output(["df","-h"])) +\
            '\n\n==============================\n\n'

        with open(project_file, 'a') as project_file:
            project_file.write(info_string)


    def _duplicateProjectFile(self, project_file):
        index = project_file.rfind('/')
        tech_file = project_file[:index+1] + '.' + project_file[index+1:]
        shutil.copy(project_file,tech_file)


if __name__ == '__main__':
    scnprojectsetup = ProjectSetup()
